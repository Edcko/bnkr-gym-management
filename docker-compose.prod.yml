version: '3.8'

services:
  # Base de datos PostgreSQL para producci贸n
  postgres:
    image: postgres:15-alpine
    container_name: bnkr-postgres-prod
    environment:
      POSTGRES_DB: bnkr_gym_prod
      POSTGRES_USER: bnkr_prod_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - bnkr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bnkr_prod_user -d bnkr_gym_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API para producci贸n
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bnkr-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://bnkr_prod_user:${POSTGRES_PASSWORD}@postgres:5432/bnkr_gym_prod
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bnkr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend para producci贸n
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bnkr-frontend-prod
    environment:
      VITE_API_URL: ${BACKEND_URL}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - bnkr-network
    restart: unless-stopped

  # Nginx reverse proxy para producci贸n
  nginx:
    image: nginx:alpine
    container_name: bnkr-nginx-prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - bnkr-network
    restart: unless-stopped

volumes:
  postgres_prod_data:

networks:
  bnkr-network:
    driver: bridge 