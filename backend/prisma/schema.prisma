// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN           // Administrador del sistema (acceso total)
  MANAGER         // Gerente de sucursal (acceso a sucursal)
  SUPERVISOR      // Supervisor de área (acceso a área específica)
  INSTRUCTOR      // Instructor de clases (acceso a clases)
  CLIENT          // Cliente (acceso limitado)
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum MembershipType {
  BASIC
  PREMIUM
  UNLIMITED
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageType {
  TEXT
  SYSTEM
  NOTIFICATION
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole @default(CLIENT)
  phone        String?
  dateOfBirth  DateTime?
  address      String?
  emergencyContact String?
  emergencyPhone   String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  instructorClasses    Class[]        @relation("InstructorClasses")
  reservations        Reservation[]
  instructorReservations Reservation[] @relation("InstructorReservations")
  memberships         Membership[]
  sentMessages        Message[]       @relation("SentMessages")
  receivedMessages    Message[]       @relation("ReceivedMessages")
  payments            Payment[]
  inventoryAlerts     InventoryAlert[]

  @@map("users")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // en minutos
  maxCapacity Int
  price       Decimal  @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  instructorId   String
  instructor     User         @relation("InstructorClasses", fields: [instructorId], references: [id])
  reservations   Reservation[]
  schedule       ClassSchedule[]

  @@map("classes")
}

model ClassSchedule {
  id        String   @id @default(cuid())
  classId   String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  dayOfWeek Int      // 0 = Domingo, 1 = Lunes, etc.
  startTime String   // formato "HH:MM"
  endTime   String   // formato "HH:MM"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("class_schedules")
}

model Reservation {
  id            String            @id @default(cuid())
  userId        String
  classId       String
  instructorId  String
  startTime     DateTime
  endTime       DateTime
  status        ReservationStatus @default(PENDING)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relaciones
  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class      Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  instructor User  @relation("InstructorReservations", fields: [instructorId], references: [id])

  @@map("reservations")
}

model Membership {
  id         String           @id @default(cuid())
  userId     String
  type       MembershipType
  startDate  DateTime
  endDate    DateTime
  status     MembershipStatus @default(ACTIVE)
  price      Decimal
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relaciones
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("memberships")
}

model Payment {
  id           String        @id @default(cuid())
  membershipId String?
  userId       String
  amount       Decimal
  currency     String        @default("USD")
  status       PaymentStatus @default(PENDING)
  stripePaymentId String?
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relaciones
  membership Membership? @relation(fields: [membershipId], references: [id])
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int
  unit        String   // "pairs", "units", "kg", etc.
  threshold   Int      // cantidad mínima para alertas
  price       Decimal?
  supplier    String?
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  alerts InventoryAlert[]

  @@map("inventory_items")
}

model InventoryAlert {
  id             String   @id @default(cuid())
  inventoryItemId String
  userId         String
  message        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  // Relaciones
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inventory_alerts")
}

model Message {
  id        String      @id @default(cuid())
  senderId  String
  receiverId String?
  content   String
  type      MessageType @default(TEXT)
  isRead    Boolean     @default(false)
  timestamp DateTime    @default(now())

  // Relaciones
  sender    User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model FAQ {
  id       String @id @default(cuid())
  question String
  answer   String
  category String
  isActive Boolean @default(true)
  order    Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String   // "info", "warning", "error"
  message   String
  userId    String?
  action    String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("system_logs")
} 